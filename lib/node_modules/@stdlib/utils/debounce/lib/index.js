/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Trigger a function only once in the given time interval.
*
* @param {Function} fun - the function to debounce
* @param {number} wait - the interval to wait
* @returns {boolean} boolean indicating if the property was successfully set
* @module @stdlib/utils/debounce
*
* @example
* const debounce = require( '@stdlib/utils/debounce' );
*
* const debouncedCallback = debounce(() => {
*   someFunction();
*   console.log("Function is done");
* }, 300);
*
* @example
* const debounce = require( '@stdlib/utils/debounce' );
*
* const debouncedFunction = debounce(someFunction, 300);
*/

function debounce(fun, wait) {
  let timeoutId;
  return function(...args) {
    if (timeoutId) {
      clearTimeout(timeoutId);
    }
    timeoutId = setTimeout(() => {
      fun.apply(null, args);
    }, wait);
  }
}


// EXPORTS //

module.exports = debounce;
